// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7224.FRC2018.subsystems;

import org.usfirst.frc7224.FRC2018.RobotMap;
import org.usfirst.frc7224.FRC2018.commands.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Encoder; 
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput; 
import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc7224.FRC2018.RobotConstants;
/**
 *
 */
public class Chassis extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    private final WPI_TalonSRX right1 = RobotMap.chassisTalonSRX1;
    private final WPI_TalonSRX right2 = RobotMap.chassisTalonSRX2;    
    private final WPI_TalonSRX right3 = RobotMap.chassisTalonSRX3;
      
 
    private final WPI_TalonSRX left1 = RobotMap.chassisTalonSRX4;
    private final WPI_TalonSRX left2 = RobotMap.chassisTalonSRX5;
    private final WPI_TalonSRX left3 = RobotMap.chassisTalonSRX6;
    
    
	private final ADXRS450_Gyro gyro = RobotMap.spiGyro_1;
	Timer setPointTimer = new Timer();

	private final Encoder leftEncoder = RobotMap.leftEncoder;
	private final Encoder rigthEncoder = RobotMap.rigthEncoder;




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Chassis() {
    	    		super("Drivetrain", RobotConstants.Kp, 0, RobotConstants.Kd);
    		setAbsoluteTolerance(RobotConstants.gyroPIDErrorTolerance);
    		getPIDController().setContinuous(true);
    		getPIDController().setInputRange(-180, 180);
    		getPIDController().setOutputRange(-1.0, 1.0);
    		resetEncoders();
    		gyro.calibrate();

    	}
    
	public void resetEncoders() {
		leftEncoder.reset();
		rigthEncoder.reset();
	}
        LiveWindow.addActuator("Chassis", "PIDSubsystem Controller", getPIDController());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    	return 0;
  //      return analogGyro1.pidGet();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    } 

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        talonSRX6.pidWrite(output);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
